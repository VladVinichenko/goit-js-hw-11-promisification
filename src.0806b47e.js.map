{"version":3,"sources":["js/task_1.js","js/task_2.js","js/task_3.js","index.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","id","logSuccess","logError","warn","amount","catch"],"mappings":";;;AAAA,MAAMA,EAAQC,GACL,IAAIC,QAAQ,CAACC,EAASC,KAC3BC,WAAW,KACTF,EAAQF,IACPA,KAIDK,EAASC,GAAQC,QAAQC,sBAAsBF,OAGrDP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ;;ACbjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,KAC3BC,MAAAA,EAAeF,EAASG,IAAIC,GAChCA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,GAExDjB,OAAAA,QAAQC,QAAQc,IAGnBX,EAASW,GAAgBT,QAAQY,MAAMH,GAW7CH,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ;;AC1BnC,MAAMe,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAkBC,GACf,IAAI1B,QAAQ,CAACC,EAASC,KACrBJ,MAAAA,EAAQqB,EAA0B,IAAK,KAE7ChB,WAAW,KACUmB,KAAKE,SAAW,GAGjCvB,EAAQyB,EAAYC,GAAI7B,GAExBI,EAAOwB,EAAYC,KAEpB7B,KAID8B,EAAa,CAACD,EAAItB,KACtBC,QAAQC,mBAAmBoB,kBAAmBtB,QAG1CwB,EAAWF,IACfrB,QAAQwB,qCAAqCH,+BAa/CF,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH,GAEhEJ,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH,GAEhEJ,EAAgB,CAAEE,GAAI,GAAII,OAAQ,KAAMvB,KAAKoB,GAAYI,MAAMH,GAE/DJ,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH;;ACzChE,aAHA,QAAA,oBACA,QAAA,kBACA,QAAA,kBACA,QAAA","file":"src.0806b47e.js","sourceRoot":"../src","sourcesContent":["const delay = ms => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(ms);\n    }, ms);\n  });\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n","const users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n  const updatedUsers = allUsers.map(user =>\n    user.name === userName ? { ...user, active: !user.active } : user,\n  );\n  return Promise.resolve(updatedUsers);\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\n/*\n * Сейчас работает так\n */\n// toggleUserState(users, 'Mango', logger);\n// toggleUserState(users, 'Lux', logger);\n\n/*\n * Должно работать так\n */\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);\n","const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n  return new Promise((resolve, reject) => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve(transaction.id, delay);\n      } else {\n        reject(transaction.id);\n      }\n    }, delay);\n  });\n};\n\nconst logSuccess = (id, time) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Работает так\n */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n","import './sass/main.scss';\nimport './js/task_1.js';\nimport './js/task_2.js';\nimport './js/task_3.js';\n"]}